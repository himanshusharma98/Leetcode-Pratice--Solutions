public class Solution {
    public int MinMalwareSpread(int[][] graph, int[] initial) {
        var infected = new HashSet<int>(initial);
        var bestScore = int.MinValue;
        var best = int.MinValue;
        while (infected.Count != 0) {
            var queue = new Queue<int>();
            var visited = new bool[graph.Length];
            var removalCandidate = infected.First();
            infected.Remove(removalCandidate);
            queue.Enqueue(removalCandidate);
            visited[removalCandidate] = true;
            var score = 1;
            while (queue.Count != 0) {
                var neighbors = graph[queue.Dequeue()];
                for (var node = 0; node < graph.Length; ++node) {
                    if (neighbors[node] == 1) {
                        if (!visited[node]) {
                            visited[node] = true;
                            if (infected.Contains(node)) {
                                score = 0;
                                infected.Remove(node);
                                if (node < removalCandidate)
                                    removalCandidate = node;
                            }
                            else if (score != 0)
                                ++score;
                            queue.Enqueue(node);
                        }
                    }
                }
            }
            if (score > bestScore || (score == bestScore && removalCandidate < best)) {
                bestScore = score;
                best = removalCandidate;
            }
        }
        return best;
    }
}